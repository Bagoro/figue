#summary figue is a javascript package to cluster data and visualize clusters.

= Introduction =

This project provides a collection of clustering algorithms implemented in Javascript and open sourced under the MIT licence. The current version supports k-means and agglomerative clustering and provides functions to visualize clustering output (e.g. dendograms). 

Here is an [http://web.science.mq.edu.au/~jydelort/figue/demo.html interactive demo] of figue. 

== Using figue ==

In order to use figue in your web page, simply link to it in the head section of your HTML page, e.g.:

{{{
<head>

<script type="text/javascript" src="figue.js"></script>

</head>

}}}


== Hierarchical Clustering ==

Hierarchical clustering is useful to cluster data without knowing _apriori_ the number of clusters or just to visualize the distance relationships between data items.

The following code shows how to generate a hierarchical cluster using figue:

{{{

  // Data source: LinkedIn
  // Initial data are businesses that need to be clustered according to their size (nb of employees) and revenue (in mln$)

  var data = [ 
      {'company': 'Microsoft' , 'size': 91259, 'revenue': 60420},
      {'company': 'IBM' , 'size': 400000, 'revenue': 98787},
      {'company': 'Skype' , 'size': 700, 'revenue': 716},
      {'company': 'SAP' , 'size': 48000, 'revenue': 11567},
      {'company': 'Yahoo!' , 'size': 14000 , 'revenue': 6426 },
      {'company': 'eBay' , 'size': 15000, 'revenue': 8700},
   ] ;

  // Create the labels and the vectors describing the data

  var labels = new Array ;
  var vectors = new Array ;
  for (var i = 0 ; i < data.length ; i++) {
      labels[i] = data[i]['company'] ;
      vectors[i] = [ data[i]['size'] , data[i]['revenue']] ;
  }


  var root = figue.agglomerate(labels, vectors , figue.EUCLIDIAN_DISTANCE,figue.SINGLE_LINKAGE) ;

}}}

Figue can generate hierarchical clusters using the following linkage techniques: 
  * single-linkage (figue.SINGLE_LINKAGE)
  * complete-linkage (figue.COMPLETE_LINKAGE)
  * average linkage (figue.AVERAGE_LINKAGE)

Three different types of distances are also supported:
  * Euclidian (figue.EUCLIDIAN_DISTANCE)
  * Max (figue.MAX_DISTANCE)
  * Manhattan (figue.MANHATTAN_DISTANCE)

For more information about hierarchical clustering please refer to [http://en.wikipedia.org/wiki/Cluster_analysis#Hierarchical_clustering Wikipedia].


=== Dendograms === 

Figue can generate graphical representations of hierarchical clusters by means of dendograms such as this one:

{{{
                                               |               
                                  ___________________________  
                                  |                         |  
                    _____________________________           |  
                    |                           |           |  
        _________________________               |           |  
        |                       |               |           |  
 ______________            ___________          |           |  
 |            |            |         |          |           |  
anna       stephany       tom       marc       john       karin
}}}


Currently the dendogram can be customized to:
  * control the minimum spacing between nodes
  * be balanced (i.e. all leaves at the same level)
  * display data labels
  * display cluster centroids
  * display distance between centroids

The function to produce dendograms is a method that is must be called by the root node, e.g. 

{{{
root.buildDendogram (5, true, true, true, false) ;
}}}

This example will produce a dendogram:
  * with minimum spacing between nodes: 5 (i.e. 5 blank characters)
  * balanced
  * showing cluster labels
  * showing cluster centroids
  * not showing distance between clusters


=== Full example ===


{{{
<html>
<head>

<script type="text/javascript" src="figue.js"></script>

<script type="text/javascript">

function load() {

  // Data source: LinkedIn
  // Initial data are businesses that need to be clustered according to their size (nb of employees) and revenue (in mln$)

  var data = [ 
      {'company': 'Microsoft' , 'size': 91259, 'revenue': 60420},
      {'company': 'IBM' , 'size': 400000, 'revenue': 98787},
      {'company': 'Skype' , 'size': 700, 'revenue': 716},
      {'company': 'SAP' , 'size': 48000, 'revenue': 11567},
      {'company': 'Yahoo!' , 'size': 14000 , 'revenue': 6426 },
      {'company': 'eBay' , 'size': 15000, 'revenue': 8700},
   ] ;

  // Create the labels and the vectors describing the data

  var labels = new Array ;
  var vectors = new Array ;
  for (var i = 0 ; i < data.length ; i++) {
      labels[i] = data[i]['company'] ;
      vectors[i] = [ data[i]['size'] , data[i]['revenue']] ;
  }


  var root = figue.agglomerate(labels, vectors , figue.EUCLIDIAN_DISTANCE,figue.SINGLE_LINKAGE) ;

  var dendogram = root.buildDendogram (5, true, true, true, false) ;

  // Render the dendogram in the page
  document.getElementById('mypre').innerHTML = dendogram
}

</script>

<body onload="load();">

<pre id="mypre"></pre>

</body>
</html>

}}}

This page will print:
{{{
                                                           |                                    
                                                   94826.5,31102.67                             
                             _____________________________________________________________      
                             |                                                           |      
                      33791.8,17565.8                                                    |      
     ________________________________________________                                    |      
     |                                              |                                    |      
     |                                        19425,6852.25                              |      
     |                           _______________________________________                 |      
     |                           |                                     |                 |      
     |                     9900,5280.67                                |                 |      
     |               _________________________                         |                 |      
     |               |                       |                         |                 |      
     |               |                  14500,7563                     |                 |      
     |               |              __________________                 |                 |      
     |               |              |                |                 |                 |      
91259,60420       700,716       14000,6426       15000,8700       48000,11567       400000,98787
 Microsoft         Skype          Yahoo             eBay              SAP               IBM     

}}}


== K-means ==

==TODO==
  * In demo.html add function to randomly generate DS of any size
  * In wiki page, include results of a scalability analysis